from math import sqrt


# задача 1 по 2 введеным пользователем катетам найти гипотенузу
def find_gipotenuz(katet1: int, katet2: int) -> int:  # задаем функцию которая находит гипотенузу по 2 параметрам
    gipotenuz: float = sqrt(katet1 ** 2 + katet2 ** 2)  # формула по нахождению гипотенузы
    return int(gipotenuz)


find_gipotenuz(int(input('введите длину первого катета:')), int(input('введите длину второго катета:')))


# задание 2 вводятся 3 числа. найти какое из них среднее
def srednee(number1: int, number2: int, number3: int):  # функция по сравнению 3 параметров
    if number2 < number1 < number3 or number3 < number1 < number2:  # условие для 1 числа
        print(f'число {number1} является средним')
    elif number1 < number2 < number3 or number3 < number2 < number1:  # условие для 2 числа
        print(f'число {number2} является средним')
    else:  # условие для 3 числа
        print(f'число {number3} является средним')


srednee(int(input('введите первое число: ')),
        int(input('введите второе число: ')),
        int(input('введите третье число: ')))


# задание 3 из 2 чисел (одно четное, второе нечетное). определить и вывести нечетное
def chisla(chislo1: int, chislo2: int):  # функция в которую подаются две переменные
    if chislo1 % 2 != 0:  # если первая переменная нечетная
        print(f'число {chislo1} нечетное')
    if chislo2 % 2 != 0:  # если вторая переменная нечетная (тут идет проверка обоих иф)
        print(f'число {chislo2} нечетное')
    else:  # иначе они оба четные
        print(f'оба числа {chislo1} {chislo2} четные')


chisla(int(input('введите первое число: ')), int(input('введите второе число: ')))


# задание 4 ввести число и получить его перевертыш
def perevertish(chislo: int):  # функция в которую подается число
    spisok: str = str(chislo)  # число преобразуем в список
    return spisok[::-1]  # выводит перевернутый список, т.е перевернутое наше число


perevertish(int(input('введите число: ')))


# задание 5 нарисовать прямоугольник: контур один символ, заливка другой
def zalivka(dlina: int, shirina: int):  # задаем функцию с указанием длины и ширины прямоугольника
    print('-' * shirina)  # выводим верхнее ребро
    for i in range(dlina):  # задаем цикл для длины
        print('|' + '#' * (shirina - 2) + '|')  # заливаем всё что внутри
    print('-' * shirina)  # выводим нижнее ребро


zalivka(int(input('введите длину прямоугольника: ')),
        int(input('введите ширину прямоугольника: ')))


# задание 6 найти совершенные числа до 1000 кот равны сумме всех своих делителей кроме себя (пр. 6 = 1 2 3 в сумме 6)
def perfect() -> int:  # задаем функцию
    for i in range(1000):  # проходимся циклом по числам до 1000
        sum_delitel: int = 0  # задаем переменную для нахожденяи суммы делителей
        for x in range(1, i):  # задаем цикл для делителя от 1 до самого числа
            if i % x == 0:  # если число делится на делитель без остатка
                sum_delitel += x  # то суммируем эти делители
        if i == sum_delitel:  # если сумма этих делителей равна самому числу
            return i  # выводим это число


perfect()


# задание 7
# заполнить численный массив но последний эл не добавить. вывести его на экран.
# запросить еще одно значение и его место в массиве и вставить его в массив
def massiv():
    arr = []  # задаем внутри функции пустой массив
    for i in range(10):  # задаем цикл для заполнения массива 10 числами
        if i < 9:  # указываем что надо только 9 чисел
            arr.append(input('введите число: '))  # и добавляем все числа в массив
    print(arr)  # вывдим массив
    new_number: int = int(input('введите еще одно число: '))  # вводим переменную для запроса у пользователя еще числа
    new_index: int = int(input('введите его индекс в массиве: '))  # вводим переменнуб для запроса индекса этого числа
    arr.insert(new_index, new_number)  # по индексу добавляем это число в массив
    return arr  # выводим новый массив


massiv()


# задание 8 вводится строка состоящая из слов разделенных пробелами. посчитать количество слов
def stroka(text: str) -> int:  # функция в которую вводится текст
    new = text.split(' ')  # преобразуется в список убирая пробелы
    return len(new)  # считает количество элементов


stroka(str(input('введите несколько слов через пробел: ')))


# задание 9 введите строку которая состоит из букв разных регистров. очистить от всех заглавынх букв и вывести
def registr(strok: str):  # задаем функцию в которую вводится строка
    for i in strok:  # задаем цикл для каждого слова в строке
        for x in i:  # задаем цикл для каждой буквы в слове
            if x.islower():  # если буква в нижнем регистре
                print(x, end='')  # печатаем ее


registr(str(input('введите строку которая состоит из букв разных регистров: ')))


# задание 10 выводит числа от 0 до 100 и пропускает кратные 7
def numbers():  # задаем функцию безе параметра чтобы она просто выдавала последовательность
    for i in range(100):  # задаем цикл до 100
        if i % 7 != 0:  # если число делится на 7 с остатком
            print(i, end=' ')  # то печатаем его


numbers()


# задание 11 найти сумму ряда чисел от 1 до 100
def sum_():  # задаем функцию
    sum__: int = 0  # задаем перемнную для подсчета суммы
    for i in range(1, 100):  # задаем цикл для последовательности
        sum__ += i  # суммируем каждое значение из цикла
    print(sum__)  # печатаем сумму


sum_()


# задание 12 вводится число Н и находится его факториал (1*2*3*...*Н)
def faktorial(N: int):  # задется функция с перемнной ввиде числа Н
    faktr: int = 1  # задаем переменную для расчета произведения
    for i in range(1, N + 1):  # задаем цикл который будет идти от 1 до заданного числа +1 чтобы само число попало
        faktr *= i  # будет считать произведение всех цифр т.е факториал
    print(faktr)


faktorial(int(input('введите значение N: ')))


# задание 13 пользоваетель подает число S. вывести ёлочку от 1 до S
def tree(S: int):
    count_ = 1
    step = 2
    for i in range(1, S + 1):
        print(i, end=' ')
        if i == count_:
            count_ += step
            print('\n')
            step += 1


tree(int(input('введите число S: ')))


# задание 14 по данному числу P вывести все целые степени 2 не превосходящие P
def stepen_two(P: int):  # задаем функцию с параметром ввиде числа подаваемого с клавиатуры
    for i in range(0, P):  # задаем цикл от 0 до Р для степени числа 2
        if 2 ** i < P:  # если 2 в степени до Р меньше самого Р
            print(2 ** i)  # то выводим значение цифры 2 в этой степени


stepen_two(int(input('введите число Р: ')))
